#include <curl/curl.h>
#include <docker_containers.h>
#include <iup.h>
#include <iupcontrols.h>
#include <stdio.h>
#include <stdlib.h>

docker_containers_list* list_containers() {
	curl_global_init(CURL_GLOBAL_ALL);

	printf("Docker containers list.\n\n");

	docker_containers_list_filter* filter = make_docker_containers_list_filter();
	containers_filter_add_name(filter, "/registry");
	docker_containers_list* containers = docker_container_list(1, 5, 1, filter);

	curl_global_cleanup();
	return containers;
}

Ihandle* create_matrix() {
	docker_containers_list* cl = list_containers();
	char*id = (char*) malloc(100 * sizeof(char));

	Ihandle* mat = IupMatrix(NULL);
	sprintf(id, "%d", docker_containers_list_length(cl));
	IupSetAttribute(mat, "NUMLIN", id);
	IupSetAttribute(mat, "NUMCOL", "8");

	IupSetAttribute(mat, "0:0", "Id");
	IupSetAttribute(mat, "0:1", "Name");
	IupSetAttribute(mat, "0:2", "Image");
	IupSetAttribute(mat, "0:3", "Command");
	IupSetAttribute(mat, "0:4", "Public Port");
	IupSetAttribute(mat, "0:5", "Private Port");
	IupSetAttribute(mat, "0:6", "Size of Root");
	IupSetAttribute(mat, "0:7", "State");
	IupSetAttribute(mat, "0:8", "Status");

	IupSetAttribute(mat, "RESIZEMATRIX", "YES");
	IupSetAttribute(mat, "RESIZEDRAG", "Yes");
//
//	IupSetAttribute(mat, "FONT3:3", "Helvetica, 24");
//	IupSetAttribute(mat, "TOGGLECENTERED", "Yes");
//
////	IupSetAttribute(mat, "FRAMEVERTCOLOR1:2", "BGCOLOR");
////	IupSetAttribute(mat, "FRAMEHORIZCOLOR1:2", "0 0 255");
////	IupSetAttribute(mat, "FRAMEHORIZCOLOR1:3", "0 255 0");
////	IupSetAttribute(mat, "FRAMEVERTCOLOR2:2", "255 255 0");
////	IupSetAttribute(mat, "FRAMEVERTCOLOR*:4", "0 255 0");
////	IupSetAttribute(mat, "FRAMEVERTCOLOR*:5", "BGCOLOR");
//
	IupSetAttribute(mat, "NUMCOL_NOSCROLL", "1");
	IupSetAttribute(mat, "NOSCROLLASTITLE", "Yes");
//
	IupSetAttribute(mat, "NUMCOL_VISIBLE", "8");
	IupSetAttribute(mat, "NUMLIN_VISIBLE", "20");

	for (int i = 0; i < docker_containers_list_length(cl); i++) {
		docker_container_list_item* item = docker_containers_list_get_idx(cl, i);
		sprintf(id, "%d:0", i + 1);
		IupSetAttribute(mat, id, docker_container_list_item_get_id(item));
		sprintf(id, "%d:1", i + 1);
		IupSetAttribute(mat, id,  docker_container_list_item_names_get_idx(item, 0));
		sprintf(id, "%d:2", i + 1);
		IupSetAttribute(mat, id, docker_container_list_item_get_image(item));
		sprintf(id, "%d:3", i + 1);
		IupSetAttribute(mat, id,docker_container_list_item_get_command(item));
		sprintf(id, "%d:4", i + 1);
		if (docker_container_list_item_ports_length(item) > 0) {
			docker_container_ports* first_port = docker_container_list_item_ports_get_idx(item, 0);
			IupSetInt(mat, id, docker_container_ports_get_public_port(first_port));
			sprintf(id, "%d:5", i + 1);
			IupSetInt(mat, id, docker_container_ports_get_private_port(first_port));
		}
		sprintf(id, "%d:6", i + 1);
		IupSetInt(mat, id, docker_container_list_item_get_size_root_fs(item));
		sprintf(id, "%d:7", i + 1);
		IupSetAttribute(mat, id, docker_container_list_item_get_state(item));
		sprintf(id, "%d:8", i + 1);
		IupSetAttribute(mat, id, docker_container_list_item_get_status(item));
	}
	free(id);

	return mat;
}

int main(int argc, char **argv) {
	Ihandle *dlg, *vbox, *mat;

	IupOpen(&argc, &argv);
	IupControlsOpen();

	mat = create_matrix();

	vbox = IupVbox(mat, NULL);
	IupSetAttribute(vbox, "MARGIN", "10x10");
	IupSetAttribute(vbox, "GAP", "10");
	IupSetAttribute(vbox, "ALIGNMENT", "ACENTER");
	dlg = IupDialog(vbox);
	IupSetAttribute(dlg, "TITLE", "V-Rex: Docker UI");

	IupShowXY(dlg, IUP_CENTER, IUP_CENTER);
	IupMainLoop();
	IupClose();
	return EXIT_SUCCESS;
}
